<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE page PUBLIC "-//SELFHTML//DTD SDML 1.0 Full//DE"
"http://src.selfhtml.org/grammar/dtd/sdml1-full.dtd">
<page idref="basis_javascript_ajax">
    <idindex>
        &idindex;
    </idindex>
    <document-description></document-description>
    <document-keywords>ajax, xmlhttprequest, serverkommunikation, server, xml, json, http</document-keywords>
    <title>Serverkommunikation und dynamische Webanwendungen (Ajax)</title>
    <pageunit name="notizen">
        <heading>Notizen</heading>
        <p>Neue Art von Webanwendungen, die massiv mit JavaScript arbeiten und im Hintergrund mit der serverseitigen Anwendung kommunizieren</p>
        <p>Vgl. <hyperlink href="http://molily.de/temp/javascript-doku.html#Kurse:_Expertenwissen:_Serverkommunikation_.28Ajax_und_XMLHttpRequest.29" link-type="external">Serverkommunikation</hyperlink></p>
    </pageunit>
    <pageunit name="webanwendungen">
        <heading>Entstehung von Ajax: Neue dynamische Webanwendungen</heading>
        <p>In der Anfangszeit bestand das World Wide Web aus einer Sammlung von weltweit abrufbaren wissenschaftlichen Daten und Dokumenten. Das heutige Web hingegen bietet nicht bloß statische Informationsangebote, sondern maßgeblich interaktive Dienste. Spätestens unter dem Schlagwort <em>Web 2.0</em> sind unzählige sogenannte <em>Webanwendungen</em> aus dem Boden gesprossen, die vorher ungeahnte Dienste ins Web brachten. Man denke nur an Kontaktnetzwerke, die selbst keine Inhalte
        bereitstellen, sondern ihren Nutzern Kommunikation und das Einstellen eigener Inhalte ermöglichen. Das Web als Verbund von mehreren Rechnern, nicht mehr der einzelne Rechner ist die Plattform für Software dieser Art.</p>
        <p>Viele dieser neuen Webanwendungen setzen stark auf JavaScript, um die Funktionalität klassischer Desktop-Anwendungen bereitzustellen - mit den Besonderheiten, die sich daraus ergeben, dass die Anwendung nun im Netz beheimatet ist. Heraus kommen zum Beispiel E-Mail-Programme, News-Leseprogramme, Textverarbeitung, Tabellenkalkulation, Präsentationen, Chat-Programme, Foto-Verwaltung und Bildbearbeitung, Terminkalender und Adressbücher, Karten-Anwendungen und vieles mehr. Mittlerweile
        genießen diese Innovationen eine ungeheure Popularität und vereinfachen die Arbeit am Computer und im Netz.</p>
        <p>JavaScript spielt dabei eine zentrale und gänzlich neue Rolle. Es handelt sich nicht um klassische HTML-Dokumente, denen mit JavaScript ein wenig Interaktivität hinzugefügt wird. Stattdessen funktionieren viele dieser neuartigen Webanwendungen ohne JavaScript nicht. Durch komplexes Event-Handling und viele Tricks bringt JavaScript einfache HTML-Elemente dazu, sich wie Bedienelemente von Desktop-Programmen zu verhalten - z.B. wie Schaltflächen, Menüs oder Dialogfenster.</p>
    </pageunit>
    <pageunit name="ajax-definition">
        <heading>Was ist anders an Ajax?</heading>
        <note editor="mschaefer" type="todo">Client- und Servermodell sowie HTTP vorausgesetzt</note>
        <p>Gemeinsam ist den besagten Webanwendungen eine clientSchlüsseltechnik namens <strong>Ajax</strong>. Das bedeutet: <strong>JavaScript tauscht im Hintergrund Daten mit dem Webserver aus</strong> – über selbst erzeugte HTTP-Anfragen, deren Server-Antwort dem Script zur Verfügung steht.</p>
        <p>Um zu verstehen, was an diesem Modell neu ist, muss man zuerst verstehen, wie das Web <em>ohne Ajax</em> funktioniert: Herkömmliche Webseiten nutzen Links und Formulare, um mit dem Webserver zu interagieren. Der Anwender aktiviert einen Link oder sendet ein Formular ab, woraufhin der Browser eine entsprechende Anfrage an den Webserver stellt. Der Webserver antwortet, indem er ein HTML-Dokument zurückliefert, welches der Browser verarbeitet und anzeigt. Ohne Ajax muss also immer ein
        neues, vollständiges HTML-Dokument vom Server geladen werden. Diese HTML-Dokumente werden oft von serverseitigen Programmen generiert.</p>
        <p>Ajax durchbricht dieses Prinzip und kann damit die Bedienung von Webseiten und den Aufbau von Webanwendungen grundlegend ändern. Es werden nicht immer neue HTML-Dokumente heruntergeladen und ausgewechselt, sondern nur kleine Datenportionen mit dem Webserver ausgetauscht. Gerade benötigte Daten werden nachgeladen und ausgewählte Änderungen dem Server mitgeteilt. Im Extremfall kommt eine sogenannte <em>Single Page Application</em> heraus, bei der es nur ein ursprüngliches HTML-Dokument
        gibt und der restliche Datenaustausch mit dem Webserver per JavaScript im Hintergrund abläuft. Über die DOM-Schnittstelle wird das Dokument nach Belieben umgestaltet. Es reagiert auf Benutzereingaben, übersendet diese gegebenenfalls an den Server, lädt im Hintergrund Inhalte vom Server nach und montiert diese ins bestehende Dokument ein.</p>
    </pageunit>
    <pageunit name="vorteile-nachteile">
        <heading>Vor- und Nachteile von Ajax</heading>
        <p>Der Vorteil von Ajax-Webanwendungen ist, dass sie schneller auf Benutzereingaben reagieren und dem vertrauten Verhalten von Desktop-Anwendungen näherkommen.</p>
        <p>Im herkömmlichen Modell klickt der Anwender auf einen Link oder den Absende-Button eines Formulars und muss erst einmal warten: Der Browser übermittelt eine Anfrage an den Webserver. Dieser nimmt gegebenenfalls Änderungen in einer Datenbank vor und generiert ein neues vollständiges Dokument. Erst wenn dieses zurück zum Client-Rechner übertragen wurde, kann der Anwender in der Webanwendung weiterarbeiten. Mit Ajax hingegen werden die Serveranfragen im Hintergrund gestartet. Damit fällt
        das Warten auf die Serverantwort entweder ganz weg oder der Server muss nur eine kleine Datenportion zurückschicken, was viel schneller abläuft.</p>
        <p>Dieses Modell bricht absichtlich mit grundlegenden Funktionsweisen und Regeln des Webs. Daraus zieht es seine Vorteile, aber auch schwerwiegende Nachteile. Ajax-Webanwendungen verlagern einen großen Teil der Datenverarbeitung vom Server-Rechner auf den Client-Rechner - genauer gesagt in den Browser. Damit steigen die Ansprüche, die an die Zugangssoftware gestellt werden.</p>
        <p>...</p>
    </pageunit>
    <pageunit name="begriff">
        <heading>Der Begriff »Ajax«</heading>
        <p>Der Begriff <em>Ajax</em> wurde ursprünglich im Jahr 2005 von dem richtungsweisenden Artikel <hyperlink href="http://www.adaptivepath.com/ideas/essays/archives/000385.php" link-type="external">A New Approach to Web Applications</hyperlink> von Jesse James Garrett geprägt. Ajax steht darin als Abkürzung für <em>Asynchronous JavaScript and XML</em>.</p>
        <p>Diese Abkürzung stift leider mehr Verwirrung, als sie zum Verständnis beiträgt. Weder sind Ajax-Anwendungen »asynchron« in dem Sinne, dass die Kommunikation mit dem Server völlig losgelöst von Benutzereingaben stattfindet. Noch ist XML notwendigerweise das geeignete Übertragungsformat für Daten zwischen Client und Server. Garretts Konzept taugt wenig zum Verständnis der gegenwärtigen Praxis, die unter dem Schlagwort Ajax zusammengefasst wird.</p>
        <p>In den meisten Fällen bezeichnet »Ajax« lediglich den JavaScript-gestützte Datenaustausch mit dem Webserver. XML in dabei nur ein mögliches, aber nicht das zentrale Übertragungsformat. Und »Asynchronität« bedeutet lediglich, dass die JavaScript-Ausführung beim Warten auf die Serverantwort nicht den Browser blockiert, sondern dass JavaScript-Ereignisse gefeuert werden, wenn die Serverantwort eingetroffen ist - dazu mehr im folgenden Abschnitt.</p>
    </pageunit>
    <pageunit name="anwendung">
        <heading>Typische Anwendungsfälle</heading>
        <p>...</p>
    </pageunit>
    <pageunit name="xmlhttprequest">
        <heading>XMLHttpRequest und andere Techniken zur Serverkommunikation</heading>
        <p>Hintergrund-Serverkommunikation wird in erster Linie mit einer JavaScript-Technik umgesetzt: dem <code>XMLHttpRequest</code>-Objekt. Dies ist ursprünglich eine proprietäre Erfindung von Microsoft für den Internet Explorer. Mithilfe von ActiveX ist es im Internet Explorer möglich, ein <code>XMLHttpRequest</code>-Objekt zu erzeugen. Darüber werden HTTP-Anfragen gestartet und die Serverantwort ausgelesen.</p>
        <p>Andere Browserhersteller erkannten die Möglichkeiten von <code>XMLHttpRequest</code> und übernahmen diese Technik - allerdings ohne ActiveX. Mittlerweile kennen alle großen JavaScript-fähigen Browser das Objekt <code>window.XMLHttpRequest</code>. Ab Version 7 des Internet Explorers ist dieses globale Objekt ebenfalls verfügbar, bei älteren Versionen muss der Umweg über ActiveX genommen werden.</p>
        <p>Der Clou an <code>XMLHttpRequest</code> ist, dass es eine Server-Anfrage standardmäßig <em>asynchron</em> absendet und die Server-Antwort durch Ereignis-Behandlung verarbeitet wird. Das bedeutet, dass ein Script die Anfrage auslöst und eine angegebene Handler-Funktion aufgerufen wird, sobald sich der Status der Anfrage ändert und schließlich die Antwort eintrifft. Das hat folgenden Sinn: Der Browser friert an der Stelle, wo die Anfrage abgesendet wird, nicht ein und stoppt das
        JavaScript, bis die Antwort eingetroffen ist, sondern kommt zur Ruhe, kann andere Scriptteile ausführen und sogar weitere Serveranfragen starten. Erst dadurch ist die schnelle und unterbrechungsfreie Reaktion auf Benutzereingaben möglich, die für Ajax-Anwendungen typisch ist.</p>
        <p>Neben <code>XMLHttpRequest</code> gibt es weitere JavaScript-Techniken, um im Hintergrund Daten mit dem Webserver auszutauschen. Strenggenommen wurde Ajax schon lange praktiziert, bevor sich <code>XMLHttpRequest</code> breiter Browserunterstützung erfreute. Aber erst mit <code>XMLHttpRequest</code> gelang Ajax der Durchbruch, weshalb beide Begriffe oft synonym verwendet werden. Dies allerdings zu Unrecht: Zwar ist <code>XMLHttpRequest</code> die vielseitigste, aber beileibe nicht
        immer die einfachste und geeignetste Methode, um Informationen mit dem Webserver auszutauschen. Alternativen sind unter anderem:</p>
        <ul>
            <li>Versteckte eingebettete Frames (<em>Inner Frames</em>, <em>IFrames</em>), in denen Daten geladen werden oder die als Ziel-Frame für Formulare dienen. Ein Script kann auf diesen Frame und seine Inhalte zugreifen.</li>
            <li>Per JavaScript erzeugte Bildobjekte (<code>Image</code>-Objekte), mit denen sich Serveranfragen starten lassen - unabhängig davon, ob der Server eine Bilddatei zurücksendet.</li>
            <li>Per JavaScript erzeugte <code>script</code>-Elemente, die Scripte selbst von fremden Servern einbinden können, die Daten in mit JavaScript direkt zugänglichen Formaten bereitstellen.</li>
        </ul>
        <p>...</p>
    </pageunit>
    <pageunit name="beispiel">
        <heading>Beispiel für XMLHttpRequest</heading>
        <p>...</p>
    </pageunit>
    <pageunit name="formate-xml-json">
        <heading>Übertragungsformate</heading>
        <unit>
            <heading>XML</heading>
            <p><code>XMLHttpRequest</code> hat seinen Namen daher, dass es ursprünglich dazu gedacht war, XML-Dokumente vom Server herunterzuladen. JavaScript kann anschließend mit verschiedenen Schnittstellen mit dem Dokument arbeiten. Das funktioniert zwar vorzüglich, allerdings ist das Extrahieren von Daten aus einem XML-Dokument über die DOM-Schnittstelle umständlich.</p>
            <p>Wenn Sie strukturierte Daten per XML übertragen wollen, müssen Sie ein eigenes XML-Derivat, d.h. eine Auszeichnungssprache nach den Regeln von XML entwerfen. Sie definieren gewisse Elemente und Attribute und die grammatischen Regeln, wie diese zusammengesetzt werden können. So entstehen Datenstrukturen, die die zu übertragenden Informationen in der notwendigen Ordnung beinhalten. Das zugehörige JavaScript kann diese Elemente ansprechen und die Werte der enthaltenen Textknoten bzw.
            Attribute auslesen.</p>
            <p>Auch wenn Sie die Grammatik-Regeln der XML-Sprache nicht unbedingt in einer formalen Dokumentyp-Definition (DTD) niederschreiben müssen, ist das Entwerfen eines neuen XML-Derivates bloß für Ajax vergleichsweise aufwändig. Das Auslesen der Informationen im JavaScript erfordert nicht nur Kenntnisse des XML-DOM, sondern ist mit ziemlicher Schreibarbeit verbunden.</p>
            <p>Wenn die serverseitigen Programme, die Ihre Website betreiben, bereits ein XML-Format als Speicher- oder Austauschformat verwendet und die damit ausgezeichneten Daten zum Client weitergeschickt werden sollen, bietet es sich auch für Ajax an. Andernfalls ist XML oftmals kompliziert und überdimensioniert.</p>
            <p>...</p>
            <example>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;us-präsidenten&gt;
   &lt;präsident&gt;
      &lt;name&gt;Harry S. Truman&lt;/name&gt;
      &lt;partei&gt;Demokraten&lt;/partei&gt;
      &lt;beginn&gt;1945&lt;/beginn&gt;
      &lt;ende&gt;1953&lt;/ende&gt;
   &lt;/präsident&gt;
   &lt;präsident&gt;
      &lt;name&gt;Dwight D. Eisenhower&lt;/name&gt;
      &lt;partei&gt;Republikaner&lt;/partei&gt;
      &lt;beginn&gt;1953&lt;/beginn&gt;
      &lt;ende&gt;1961&lt;/ende&gt;
   &lt;/präsident&gt;
   &lt;präsident&gt;
      &lt;name&gt;John F. Kennedy&lt;/name&gt;
      &lt;partei&gt;Demokraten&lt;/partei&gt;
      &lt;beginn&gt;1961&lt;/beginn&gt;
      &lt;ende&gt;1963&lt;/ende&gt;
   &lt;/präsident&gt;
&lt;/us-präsidenten&gt;</example>
        </unit>
        <unit>
            <heading>JSON</heading>
            <p>...</p>
            <example>[
   {
      "name" : "Harry S. Truman",
      "partei" : "Demokraten",
      "beginn" : 1945,
      "ende" : 1953
   },
   {
      "name" : "Dwight D. Eisenhower"
      "partei" : "Republikaner",
      "beginn" : 1953,
      "ende" : 1961
   },
   {
      "name" : "John F. Kennedy"
      "partei" : "Demokraten",
      "beginn" : 1961,
      "ende" : 1963
   }
]</example>
            <p>...</p>
        </unit>
        <unit>
            <heading>HTML</heading>
            <p>...</p>
        </unit>
        <unit>
            <heading>Nur-Text</heading>
            <p>...</p>
        </unit>
    </pageunit>
    <pageunit name="sicherheit">
        <heading>Ajax und Sicherheit</heading>
        <p>...</p>
    </pageunit>
</page>