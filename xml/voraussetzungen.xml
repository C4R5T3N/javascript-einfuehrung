<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE page PUBLIC "-//SELFHTML//DTD SDML 1.0 Full//DE"
"http://src.selfhtml.org/grammar/dtd/sdml1-full.dtd">
<page idref="basis_javascript_voraussetzungen">
    <idindex>
        &idindex;
    </idindex>
    <document-description></document-description>
    <document-keywords>Voraussetzungen, Struktur, Inhalt, Content, Layout, Trennung, auslagern</document-keywords>
    <title>Vorkenntnisse und Voraussetzungen</title>
    <pageunit name="notizen">
        <heading>Notizen</heading>
        <p>* Kenntnis von HTML zur Strukturierung von Texten/Dokumenten und CSS zur</p>
        <p>* Trennung von Struktur und Layout</p>
        <p>* HTML-Dokumente als Elementenbaum/Objektbaum verstehen</p>
        <p>* Ausgelagertes, effizientes CSS, sinnvoll mit IDs, Klassen und komplexen Selektoren arbeiten</p>
        <p>* Idealerweise Kenntnis einer Sprache für serverseitige Dynamik (PHP usw.), denn im Zusammenhang mit Server-Anwendungen wird JavaScript insbesondere eingesetzt</p>
    </pageunit>
    <pageunit name="herangehensweise" style="">
        <heading>Herangehensweise dieser Einführung</heading>
        <p>Diese Einführung geht von einigen Grundannahmen aus, die Sie zur Kenntnis nehmen sollten, wenn Sie JavaScript mit dieser Einführung JavaScript lernen möchten.</p>
        <ul>
            <li>Die Geschichte von JavaScript verlief äußerst wechselhaft. Viele der im Laufe dieser Geschichte entstandenen JavaScript-Tutorials sind veraltet oder empfehlen eine fragwürdige Praxis. Diese Anleitung will die Fehler vergangener Jahre möglichst vermeiden. Sie beschränkt sich auf die aktuelle Situation und erklärt ausgewählte Grundlagen des gegenwärtigen JavaScript-Gebrauchs.</li>
            <li>Diese Anleitung ist nicht für Webautoren gedacht, die bloß fremde Fertigscripte in ihre Sites einbauen wollen. Diese Einführung soll dazu befähigen, den Themenkomplex zu verstehen, um vom Einstieg an auf hohem Niveau zu programmieren. JavaScript wird nicht als schnell zu erlernende Technik dargestellt, sondern als eine vielseitige Programmiersprache mit Besonderheiten und Tücken.</li>
            <li>Diese Einführung wirkt auf den ersten Blick trocken, weil sie zunächst aus viel erklärendem Text und wenig konkretem JavaScript-Code oder Anwendungsbeispielen besteht. Das ist Absicht, denn sie möchte erst einmal die Grundkonzepte und später ständig benötigte Fertigkeiten vermitteln. Wenn Sie diese Grundlagen nachvollzogen haben, werden Sie merken, dass Sie den Aufbau von Scripten unter Rückgriff auf das erworbene Wissen verstehen können und Ihnen das Entwerfen eigener Scripte
            viel einfacher fällt.</li>
        </ul>
    </pageunit>
    <pageunit name="trennung-html-css">
        <heading>Trennung von Struktur und Layout</heading>
        <p>Bevor Sie sich mit JavaScript beschäftigen, sollten Sie sich bereits intensiv mit HTML und CSS auseinandergesetzt haben. Idealerweise haben Sie bereits eine kleine Website mit diesen Web-Sprachen geschrieben. JavaScript tritt nämlich als <em>dritte, zusätzliche Technik</em> hinzu, die auf HTML und CSS aufbaut.</p>
        <p>Für einen Einstieg in JavaScript ist es hilfreich, die <em>genauen Aufgaben</em> von HTML und CSS sowie vor allem deren Rolle im modernen Webdesign zu kennen. Sie sollten wissen, dass HTML der Auszeichnung von Texten dient. Damit entsteht ein strukturiertes Dokument – bestehend aus Überschriften, Abschnitten, Absätzen, Listen, Hyperlinks usw.</p>
        <p>Dieses Dokument wird anschließend mit CSS formatiert. Das Stylesheet hat dabei unter anderem die Aufgabe, die Struktur für den Leser ersichtlich zu machen, Übersichtlichkeit zu schaffen und nicht zuletzt eine prägnante, ansprechende und mitunter kunstvolle Erscheinung zu bieten.</p>
        <p>Zentral beim zeitgemäßen Einsatz von HTML und CSS ist die <strong>Trennung von Inhalt und Präsentation</strong>. Das bedeutet, jegliche Informationen, die die Darstellung im Browser regeln, möglichst aus dem HTML-Code herauzuhalten und stattdessen ins Stylesheet auszulagern. Gleichzeitig werden inhaltliche und strukturelle Informationen (wie z.B. »dieser Text ist wichtig«) durch entsprechende Auszeichnungen im HTML-Code untergebracht, anstatt den Text bloß im Stylesheet z.B. fett zu
        formatieren.</p>
        <p>Der Zweck dieser Trennung ist, dass der HTML-Code möglichst schlank ist und möglichst viel Bedeutung trägt. Man spricht daher auch von <strong>semantischem Markup</strong> (Semantik ist die Lehre von der Bedeutung). Dadurch lassen sich effiziente Stylesheets schreiben, die HTML-Elemente über gezielte Selektoren ansprechen. Im HTML-Code bedarf es dann nur wenige zusätzliche Angriffspunkte für das Stylesheet wie etwa <code>div</code>-Abschnitte sowie <code>id</code>- und
        <code>class</code>-Attribute. Wenn ein zentrales Stylesheet das Layout zahlreicher Dokumente steuert, ist die Präsentation mit geringem Aufwand anpassbar, ohne dass alle betroffenen HTML-Dokumente geändert werden müssen.</p>
        <p>Warum ist das für JavaScript wichtig? Je klarer und präziser HTML und CSS angewendet werden, desto einfacher ist es später, JavaScripte zu schreiben – denn mit JavaScript operieren Sie später auf Grundlage ihrer HTML-Dokumente und Ihre Scripte werden Hand in Hand mit dem Stylesheet zusammenarbeiten. Bevor Sie also die erste JavaScript-Codezeile schreiben, sollten Sie mit HTML und CSS beste Voraussetzungen dafür schaffen. Am Anfang mag das noch sehr theoretisch klingen, aber später
        werden Sie ein Gefühl dafür bekommen, wie HTML und CSS oganisiert sein müssen, um mit JavaScript effizient zusammenzuarbeiten.</p>
    </pageunit>
    <pageunit name="serverprogrammierung">
        <heading>Serverseitige Programmierung</heading>
        <p>Der Einsatz von JavaScript lohnt sich ... Webanwendungen</p>
        <p>Auf den meisten Websites ... Sie durchsuchen Produktdatenbanken, vergleichen Preise, bestellen Artikel, schauen sich Fotogalerien an, füllen Formulare aus, tippen Texte ein, navigieren durch komplexe Informationsangebote</p>
        <p>...</p>
    </pageunit>
</page>