<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE page PUBLIC "-//SELFHTML//DTD SDML 1.0 Full//DE"
"http://src.selfhtml.org/grammar/dtd/sdml1-full.dtd">
<page idref="basis_javascript_css">
    <idindex>
        &idindex;
    </idindex>
    <document-description></document-description>
    <document-keywords>CSS, Darstellung, Anzeige, Formatieren, Styles, Stylesheet, Klassen, IDs</document-keywords>
    <title>Zusammenarbeit mit CSS: Darstellung von Dokumenten steuern</title>
    <pageunit name="notizen">
        <heading>Notizen</heading>
        <p>* style-Objekte</p>
        <p>* Dafür sorgen, dass Selektoren wirken</p>
        <p>* Klassen und IDs setzen</p>
        <p>* Direkter Zugriff auf die eingelesenen Stylesheets im Speicher</p>
        <p>* <hyperlink href="http://molily.de/temp/javascript-doku.html#Kurse:_Aufbauwissen:_Darstellung_von_Dokumenten_beeinflussen_.28DOM_Style.29" link-type="external">DOM Style</hyperlink></p>
    </pageunit>
    <pageunit name="einleitung">
        <heading>Einleitung</heading>
        <p>Mit JavaScript können Sie die Darstellung des Dokuments dynamisch ändern, während es im Browser angezeigt wird. Dies ist ein wesentlicher Bestandteil der Interaktivität, die Sie einem Dokument mittels Javascript hinzufügen können. Die Möglichkeiten sind vielfältig: Beispielsweise können Sie als Reaktion auf eine Benutzereingabe gewisse Elemente ein- und ausblenden. Aber es sind auch komplexe Effekte und Animationen möglich.</p>
        <p>Die Programmiersprache JavaScript besitzt keine eigenen Techniken, um die Gestaltung einer Webseite zu beeinflussen. Vielmehr besitzt JavaScript eine Schnittstelle zur Formatierungssprache Cascading Stylesheets (CSS). Mittels JavaScript können Sie also sämtliche Formatierungen vornehmen, die CSS möglich macht. Daher sollten Sie die Grundlagen von CSS bereits beherrschen, bevor Sie Dokumente mittels JavaScript umformatieren.</p>
        <p>Das dynamische Ändern der <em>Darstellung</em> bildet einen großen Komplex in der JavaScript-Programmierung - der andere das Ändern der <em>Inhalte</em> HTML-Dokuments über das Document Object Model (DOM). Über das DOM können sie kurz gesagt Elemente hinzufügen oder löschen, Attributwerte setzen und Textinhalte einfügen oder verändern. In der Praxis gehen diese beiden Aufgaben - den Inhalt und dessen Darstellung modifzieren - oft miteinander einher. Sie sollten Sie aber in Ihren
        JavaScript-Programmen nicht völlig über den Haufen werfen.</p>
    </pageunit>
    <pageunit name="trennung-javascript-css">
        <heading>Trennung von Layout-Regeln und JavaScript-Logik</heading>
        <p>Bevor Sie die verschiedenen Möglichekeiten kennenlernen, wie Sie ein Element CSS-Formatierungen mithilfe von JavaScript verändern können, sollten Sie sich die Konzepte des <interlink link-type="page" reference="basis_javascript_hintergruende_einsatz">sinnvollen JavaScript-Einsatzes</interlink> in Erinnerung rufen.</p>
        <p>Wenn Sie bereits mit CSS fortgeschritten sind und einige Layouts mit CSS umgesetzt haben, sollten Sie die Aufgaben der Webtechniken kennen und deren sinnvolle Anwendung bereits beherrschen: Für die Strukturierung der Inhalte ist HTML zuständig. Sie wählen möglichst bedeutungsvolle HTML-Elemente und für die Feinstrukturierung vergeben Sie Klassen und IDs. Die Präsentation hingegen sollte nicht mittels HTML beeinflusst werden, sondern mit ausgelagerten Stylesheets. Diese sprechen
        gezielt Elemente im Dokument an und formatieren sie mit CSS-Eigenschaften. Idealerweise bleiben die HTML-Strukturen übersichtlich, IDs und Klassen sind sparsam gesetzt und aussagekräftig, sodass eindeutige Angriffspunkte für CSS-Regeln existieren. Diese Arbeitsweise hat bringt Ihnen enorme Vorteile bei der Webseiten-Entwicklung. Inhalte und Präsentation können unabhängig voneinander schnell geändert werden, mit wenig Aufwand kann die gewünschte Präsentation erzielt werden.</p>
        <p>Wenn nun die dritte Technik - JavaScript - hinzutritt, sollten Sie dieses Modell konsequent fortführen. Orientieren Sie sich an folgenden Faustregeln:</p>
        <ul>
            <li>Definieren Sie die Formatierungsregeln im zentralen Stylesheet, nicht im JavaScript! Trennen sie den CSS- vom JavaScript-Code.</li>
            <li>Sorgen Sie im JavaScript dafür, dass diese Formatierungsregeln angewendet werden - beispielsweise indem Sie einem Element dynamisch eine Klasse hinzufügen. Durch diese Änderung der Klasse kann eine Regel im Stylesheet greifen, deren Selektor die soeben gesetzte Klasse enthält.</li>
        </ul>
        <p>Wir werden später sehen, dass Sie nicht nur ausgelagerte Stylesheet-Regeln auf ein Element anwenden können, sondern auch direkt gewisse CSS-Eigenschaften von einzelnen Elementen ändern können. Dies entspricht dem Gebrauch des <code>style</code>-Attributs in HTML. Diese Vermischung von HTML mit CSS bzw. JavaScript mit CSS sollten Sie möglichst vermeiden. Keine Regel ohne begründete Ausnahme: Die Direktformatierung ergibt in speziellen Fällen durchaus Sinn. Doch zunächst sollten Sie
        sich mit der besagten Arbeitsweise vertraut machen.</p>
    </pageunit>
    <pageunit name="regeln-anwenden">
        <heading>Stylesheet-Regeln auf ein Element anwenden</heading>
        <p>Wie gesagt </p>
        <example>input {
   padding:4px 6px;
   border:1px solid #555;
   background-color:#fafafa;
}</example>
        <p>...</p>
        <example>.fehlerhaft {
   border-color:red;
   background-color:#fff8f5;
}</example>
        <p>definieren Sie im Stylesheet nun eine Regel, deren Selektor</p>
        <p>Am Anfang trifft dieser Selektor auf kein Element im Dokument zu</p>
        <p>Der Clou ist nun, dass Sie im Dokument gewisse minimale Änderungen vornehmen</p>
        <p>Diese Änderungen führen dazu, dass der Selektor plötzlich auf bestimmte Elemente greift.</p>
        <p>Hinweis auf Helferfunktionen addClass / removeClass / toggleClass</p>
    </pageunit>
    <pageunit name="style-objekt">
        <heading>Direktformatierung über das style-Objekt</heading>
        <p>...</p>
        <p>entspricht style-Attribut</p>
        <p>Vor- und Nachteile, Anwendungsfälle</p>
        <p></p>
    </pageunit>
    <pageunit name="werte-auslesen">
        <heading>CSS-Eigenschaften auslesen</heading>
        <p>...</p>
        <p>Gegenwärtigen Werte von CSS-Eigenschaften eines Elements auslesen</p>
        <p>Welche Textfarbe hat dieses Element? Welche Breite hat das Element?</p>
        <p>»Computed Values«</p>
    </pageunit>
    <pageunit name="stylesheets-aendern">
        <heading>Stylesheet-Regeln dynamisch erzeugen und ändern</heading>
        <p>...</p>
        <p>Zugriff auf die eingelesenen Stylesheets im Speicher</p>
    </pageunit>
    <pageunit name="weiteres">
        <heading>Weiteres (TODO)</heading>
        <p>ppk schreibt über Elementgrößen und Positionen</p>
    </pageunit>
</page>